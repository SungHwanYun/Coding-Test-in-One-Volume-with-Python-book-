#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include<bits/stdc++.h>
using namespace std;

#define CHECK(call) \
{ \
    const cudaError_t error = call;\
    if (error != cudaSuccess) { \
        printf("[device] Error: %s %d, ", __FILE__, __LINE__); \
        printf("code:%d, reason: %s\n", error, cudaGetErrorString(error)); \
        exit(-10*error); \
    } \
}

// Check if the computation results of the CPU and GPU are the same
template<typename T>
void checkResult(T* h_data, T *d_data, const int n) {
    int match = 1;
    for (int i = 0; i < n; i++) {
        if (h_data[i] != d_data[i]) {
            match = 0;
            printf("[host] Arrays do not match!\n");
            printf("[host] host %5d gpu %5d at current %d\n", h_data[i], d_data[i], i);
            break;
        }
    }
    if (match) printf("[host] Arrays match.\n\n");
}

__device__ char d_toupper(char c) {
    if ('a' <= c && c <= 'z') return 'A' + c - 'a';
    return c;
}
__global__ void convertLowerToUpperCase(char* g_idata, char* g_odata, unsigned int n) {
    unsigned int idx = blockIdx.x * blockDim.x + threadIdx.x;

    // boundary check
    if (idx >= n) return;

    g_odata[idx] = d_toupper(g_idata[idx]);
}
int main(int argc, char** argv) {
    // set up device
    int dev = 0;
    cudaDeviceProp deviceProp;
    CHECK(cudaGetDeviceProperties(&deviceProp, dev));
    printf("[host] %s starting transpose at ", argv[0]);
    printf("device %d: %s\n", dev, deviceProp.name);
    CHECK(cudaSetDevice(dev));

    /* host code */
    char in_filename[100];
    sprintf(in_filename, "%s.in", argv[1]);
    freopen(in_filename, "r", stdin);

    string A; cin >> A;
    int n = (int)A.length();
    string B;
    for (int i = 0; i < A.size(); i++) {
        char b;
        if ('A' <= A[i] && A[i] <= 'Z') b = A[i];
        else b = A[i] + 'A' - 'a';
        B = B + b;
    }
    cout << B;
    char* h_answer = (char *)malloc((n + 1) * sizeof(char));
    memcpy(h_answer, B.c_str(), n); h_answer[n] = 0;
    printf("[host] host answer : %s\n", h_answer);

    /* host - device code */
    int nbytes = n * sizeof(char);
    char* h_A = (char*)malloc(nbytes + 1);
    memcpy(h_A, A.c_str(), n);

    /* device code */
    char* d_A, *d_odata;
    dim3 block(32, 1);
    dim3 grid((n + block.x - 1) / block.x, 1);
    CHECK(cudaMalloc((void**)&d_A, nbytes + 1));
    CHECK(cudaMalloc((void**)&d_odata, nbytes + 1));
    cudaMemcpy(d_A, h_A, nbytes, cudaMemcpyHostToDevice);
    printf("[host] datasize (%d), grid(%d, %d), block(%d, %d)\n", nbytes, grid.x, grid.y, block.x, block.y);
    convertLowerToUpperCase << <grid, block >> > (d_A, d_odata, n);
    char* d_answer = (char*)malloc(n + 1);
    cudaMemcpy(d_answer, d_odata, n, cudaMemcpyDeviceToHost);
    d_answer[n] = 0;
    printf("[host] device answer : %s\n", d_answer);
    checkResult<char>(h_answer, d_answer, n);

    // memory free
    free(h_A); free(h_answer); free(d_answer);
    cudaFree(d_A); cudaFree(d_odata);
}

/*
output:
C:\coding\Cuda\x64\Debug>nvprof ./Cuda.exe 1
==32432== NVPROF is profiling process 32432, command: ./Cuda.exe 1
[host] ./Cuda.exe starting transpose at device 0: NVIDIA GeForce MX450
OIZAVBBHLGVBJCDBAPROCMGLCFGKZHXSTUBTNHUOGJTWSEBCTNUWROLJRKVGJJNDRRUEPXLDOUFHGTMUZOQEOODKZDXYYQVPNMIAVRWPMYTMAOTYPYWRGSUPNOFRHITGXOBBZQTYMGRDQKFLMMNPZHMGTOZSKZPSSTUVFVOGJNNNQHBIKLNYOUXXWAPAFHFZIMDXZIXQKVNXIMWXXHXTBEBHUCXUXOXMNYVTQXXUWALVIHEBGQLQMAYGWLYMEQUVINWCKRZIUXNZDRLRLBVUOOFHUOKEPHAGALNIICZTOZLTCHOVDLLQCCAWPJYDRCADTNRPUEGPXSSSMENXKBFZYPRPENZRBUYKLYGMHDELRJGMDWEUUWVBQAYLZEHOSIVYDXRLZKLDTJMTQNTMSKDKNZTQPBXXCKZSXOGMEERBLIJIIDKJNRMQXFUOIJAKESVNCDHEYNMOABGUYAZOBYWCVHXIVMVRORFXWYJFWSVGXNODFGWJKGZVKXLNOZBXJYCENJSPMEMHMWRLQOYKPDLKVBTDWXQPHIKZFMWNRNAEWLAYSJBMCKWLPWXYAEFLVLSGYLHXEEQPPJNWLSLSSYUZKIUCVOGVEDCLBWVSXTSWYALNAJWWAVTETTKFQABHQECZZRHEUDKEXGUFYSEWXSQYCPHGAPIISGCGWGGRNFASTCLQCQTGCAMGEPRCKAZUEFGTVJYYIFIYPLPQDMZGOBFGFDBXOIAPBMFWMEGRCCZEOSCLKLYUUHCSOAXBPNPUXOYNLEORWAWSDSZSYHGKOBPIQHAOCTIXTOFXJMKWYKRKOPMOOFYXBEABGDUPOBAJYQXYZQUGBTPQCXQNUIEWOJBCXGQTSOVAZZYGTDEORTEQBLLXLEQAIBGZXMOCNQMURCOGUEFKARYPWCYRVOCVCQIKBROAKEEYXDPVQPFQYWZUHAETIAMFFIRJDFGLFVLAGQFFZZLRJGLATWHPNUELEEGLNSOYJVVDUWOUAMXJAGSV[host] host answer : OIZAVBBHLGVBJCDBAPROCMGLCFGKZHXSTUBTNHUOGJTWSEBCTNUWROLJRKVGJJNDRRUEPXLDOUFHGTMUZOQEOODKZDXYYQVPNMIAVRWPMYTMAOTYPYWRGSUPNOFRHITGXOBBZQTYMGRDQKFLMMNPZHMGTOZSKZPSSTUVFVOGJNNNQHBIKLNYOUXXWAPAFHFZIMDXZIXQKVNXIMWXXHXTBEBHUCXUXOXMNYVTQXXUWALVIHEBGQLQMAYGWLYMEQUVINWCKRZIUXNZDRLRLBVUOOFHUOKEPHAGALNIICZTOZLTCHOVDLLQCCAWPJYDRCADTNRPUEGPXSSSMENXKBFZYPRPENZRBUYKLYGMHDELRJGMDWEUUWVBQAYLZEHOSIVYDXRLZKLDTJMTQNTMSKDKNZTQPBXXCKZSXOGMEERBLIJIIDKJNRMQXFUOIJAKESVNCDHEYNMOABGUYAZOBYWCVHXIVMVRORFXWYJFWSVGXNODFGWJKGZVKXLNOZBXJYCENJSPMEMHMWRLQOYKPDLKVBTDWXQPHIKZFMWNRNAEWLAYSJBMCKWLPWXYAEFLVLSGYLHXEEQPPJNWLSLSSYUZKIUCVOGVEDCLBWVSXTSWYALNAJWWAVTETTKFQABHQECZZRHEUDKEXGUFYSEWXSQYCPHGAPIISGCGWGGRNFASTCLQCQTGCAMGEPRCKAZUEFGTVJYYIFIYPLPQDMZGOBFGFDBXOIAPBMFWMEGRCCZEOSCLKLYUUHCSOAXBPNPUXOYNLEORWAWSDSZSYHGKOBPIQHAOCTIXTOFXJMKWYKRKOPMOOFYXBEABGDUPOBAJYQXYZQUGBTPQCXQNUIEWOJBCXGQTSOVAZZYGTDEORTEQBLLXLEQAIBGZXMOCNQMURCOGUEFKARYPWCYRVOCVCQIKBROAKEEYXDPVQPFQYWZUHAETIAMFFIRJDFGLFVLAGQFFZZLRJGLATWHPNUELEEGLNSOYJVVDUWOUAMXJAGSV
[host] datasize (1000), grid(32, 1), block(32, 1)
[host] device answer : OIZAVBBHLGVBJCDBAPROCMGLCFGKZHXSTUBTNHUOGJTWSEBCTNUWROLJRKVGJJNDRRUEPXLDOUFHGTMUZOQEOODKZDXYYQVPNMIAVRWPMYTMAOTYPYWRGSUPNOFRHITGXOBBZQTYMGRDQKFLMMNPZHMGTOZSKZPSSTUVFVOGJNNNQHBIKLNYOUXXWAPAFHFZIMDXZIXQKVNXIMWXXHXTBEBHUCXUXOXMNYVTQXXUWALVIHEBGQLQMAYGWLYMEQUVINWCKRZIUXNZDRLRLBVUOOFHUOKEPHAGALNIICZTOZLTCHOVDLLQCCAWPJYDRCADTNRPUEGPXSSSMENXKBFZYPRPENZRBUYKLYGMHDELRJGMDWEUUWVBQAYLZEHOSIVYDXRLZKLDTJMTQNTMSKDKNZTQPBXXCKZSXOGMEERBLIJIIDKJNRMQXFUOIJAKESVNCDHEYNMOABGUYAZOBYWCVHXIVMVRORFXWYJFWSVGXNODFGWJKGZVKXLNOZBXJYCENJSPMEMHMWRLQOYKPDLKVBTDWXQPHIKZFMWNRNAEWLAYSJBMCKWLPWXYAEFLVLSGYLHXEEQPPJNWLSLSSYUZKIUCVOGVEDCLBWVSXTSWYALNAJWWAVTETTKFQABHQECZZRHEUDKEXGUFYSEWXSQYCPHGAPIISGCGWGGRNFASTCLQCQTGCAMGEPRCKAZUEFGTVJYYIFIYPLPQDMZGOBFGFDBXOIAPBMFWMEGRCCZEOSCLKLYUUHCSOAXBPNPUXOYNLEORWAWSDSZSYHGKOBPIQHAOCTIXTOFXJMKWYKRKOPMOOFYXBEABGDUPOBAJYQXYZQUGBTPQCXQNUIEWOJBCXGQTSOVAZZYGTDEORTEQBLLXLEQAIBGZXMOCNQMURCOGUEFKARYPWCYRVOCVCQIKBROAKEEYXDPVQPFQYWZUHAETIAMFFIRJDFGLFVLAGQFFZZLRJGLATWHPNUELEEGLNSOYJVVDUWOUAMXJAGSV
[host] Arrays match.

==32432== Profiling application: ./Cuda.exe 1
==32432== Warning: 29 API trace records have same start and end timestamps.
This can happen because of short execution duration of CUDA APIs and low timer resolution on the underlying operating system.
==32432== Profiling result:
            Type  Time(%)      Time     Calls       Avg       Min       Max  Name
 GPU activities:   46.03%  3.5210us         1  3.5210us  3.5210us  3.5210us  convertLowerToUpperCase(char*, char*, unsigned int)
                   27.62%  2.1130us         1  2.1130us  2.1130us  2.1130us  [CUDA memcpy DtoH]
                   26.35%  2.0160us         1  2.0160us  2.0160us  2.0160us  [CUDA memcpy HtoD]
      API calls:   72.78%  89.394ms         1  89.394ms  89.394ms  89.394ms  cudaSetDevice
                   25.23%  30.988ms         1  30.988ms  30.988ms  30.988ms  cuDevicePrimaryCtxRelease
                    0.94%  1.1509ms         1  1.1509ms  1.1509ms  1.1509ms  cudaLaunchKernel
                    0.66%  810.50us         2  405.25us  33.600us  776.90us  cudaFree
                    0.17%  210.60us         2  105.30us  60.700us  149.90us  cudaMemcpy
                    0.13%  159.60us         2  79.800us  6.1000us  153.50us  cudaMalloc
                    0.05%  56.800us         1  56.800us  56.800us  56.800us  cuLibraryUnload
                    0.02%  22.400us         1  22.400us  22.400us  22.400us  cudaGetDeviceProperties
                    0.02%  20.900us       114     183ns       0ns  2.6000us  cuDeviceGetAttribute
                    0.00%  2.3000us         3     766ns       0ns  2.0000us  cuDeviceGetCount
                    0.00%  2.1000us         1  2.1000us  2.1000us  2.1000us  cuModuleGetLoadingMode
                    0.00%  1.7000us         1  1.7000us  1.7000us  1.7000us  cuDeviceTotalMem
                    0.00%     900ns         1     900ns     900ns     900ns  cuDeviceGetName
                    0.00%     800ns         2     400ns       0ns     800ns  cuDeviceGet
                    0.00%     400ns         1     400ns     400ns     400ns  cuDeviceGetLuid
                    0.00%     200ns         1     200ns     200ns     200ns  cuDeviceGetUuid

C:\coding\Cuda\x64\Debug>nvprof ./Cuda.exe 2
==32740== NVPROF is profiling process 32740, command: ./Cuda.exe 2
[host] ./Cuda.exe starting transpose at device 0: NVIDIA GeForce MX450
RSBNGCUSMBDTOMJPMHUBDXTGTOMCIAIJGRRUOMXLIIZPNDSKQHZEQZKXABRFMKHPHJLAFFWNPEPNTBGURVBQKYHMFMWMZZLADVETNUKGZJWZZPYHSXDDFCPVBCWTABNJCJGAGIBENCXQLSSBJOCAPGDEKYRDRDBEQROSOKIDLHGURVGGGFCANVTRCJVQXHWVZITSZHUZZLEAMJXQMRCQKUSWUGLPSOTXSCBDJZXMEHDTXGQZXNFVCANMYJIDWCOPHOXXALHKDMMZRFLZDYLVVESOIZYAWREDEZMTAOWNELIUGQTRVRYNHPGOPIWSKNJAGSOCDZVEVRREMVNREABZYDQVSMDPCXUAWMCIGTSZFRCTXDWGTSASGLEHXSJJVVGHOSCWKPNAWBOLLZKTUFBMHWCQQXBTMPRNSFZQJQVLAKXEUWZRBLUKRVTKHVUZUTYUBOKIRUXGBSGFKZGNUFGLATINWIIAIYHCPRTUNWBQADJYDYAVNOZPUNWEOJRUVMJCENDTTWFSXAVHTPASHKKVSAPNGYIWCXBAADWFJMCKOQRYFDAXONKVDGXRSAYAGXANCYVDBTZTTVDBKENWOAUKTCCDQJSEAJCUGTHHAUFNAVKQFXGQPBSEASMXPFPRKLBZOJVWLCLUYRGBCLJVINSOLVLBPXVRYWDIALTUKWJOMTAHTTALJRKVSZJXQECNMYINAXZHZCJVLMTIBSKDOMMINHEVFOHQTSQKBKWGKJUFJQERRKQBGRSWTMAAPBDOVPTAYIRAOCBJWVZBKCPMOHWDYCYTDCESYUHBSELXOHFLZPGUYITOKFWWMOZYXVFZYESMDUCEXGQIYGNGHOAEIHQGKOGCTRLYJIZZJABJKQCXFVIBLZQSDSVLSHLRJFISYFNVRCHAMGBGNJZDWWTQPUQGFPBDJSVHGZIOKLEXGOFNYKLTKEHQIPCHDBUYRNRIYFPLTJAGDQKLRJRTJQOCQUBAMGMULHWBMOPOWYITMNCJ[host] host answer : RSBNGCUSMBDTOMJPMHUBDXTGTOMCIAIJGRRUOMXLIIZPNDSKQHZEQZKXABRFMKHPHJLAFFWNPEPNTBGURVBQKYHMFMWMZZLADVETNUKGZJWZZPYHSXDDFCPVBCWTABNJCJGAGIBENCXQLSSBJOCAPGDEKYRDRDBEQROSOKIDLHGURVGGGFCANVTRCJVQXHWVZITSZHUZZLEAMJXQMRCQKUSWUGLPSOTXSCBDJZXMEHDTXGQZXNFVCANMYJIDWCOPHOXXALHKDMMZRFLZDYLVVESOIZYAWREDEZMTAOWNELIUGQTRVRYNHPGOPIWSKNJAGSOCDZVEVRREMVNREABZYDQVSMDPCXUAWMCIGTSZFRCTXDWGTSASGLEHXSJJVVGHOSCWKPNAWBOLLZKTUFBMHWCQQXBTMPRNSFZQJQVLAKXEUWZRBLUKRVTKHVUZUTYUBOKIRUXGBSGFKZGNUFGLATINWIIAIYHCPRTUNWBQADJYDYAVNOZPUNWEOJRUVMJCENDTTWFSXAVHTPASHKKVSAPNGYIWCXBAADWFJMCKOQRYFDAXONKVDGXRSAYAGXANCYVDBTZTTVDBKENWOAUKTCCDQJSEAJCUGTHHAUFNAVKQFXGQPBSEASMXPFPRKLBZOJVWLCLUYRGBCLJVINSOLVLBPXVRYWDIALTUKWJOMTAHTTALJRKVSZJXQECNMYINAXZHZCJVLMTIBSKDOMMINHEVFOHQTSQKBKWGKJUFJQERRKQBGRSWTMAAPBDOVPTAYIRAOCBJWVZBKCPMOHWDYCYTDCESYUHBSELXOHFLZPGUYITOKFWWMOZYXVFZYESMDUCEXGQIYGNGHOAEIHQGKOGCTRLYJIZZJABJKQCXFVIBLZQSDSVLSHLRJFISYFNVRCHAMGBGNJZDWWTQPUQGFPBDJSVHGZIOKLEXGOFNYKLTKEHQIPCHDBUYRNRIYFPLTJAGDQKLRJRTJQOCQUBAMGMULHWBMOPOWYITMNCJ
[host] datasize (1000), grid(32, 1), block(32, 1)
[host] device answer : RSBNGCUSMBDTOMJPMHUBDXTGTOMCIAIJGRRUOMXLIIZPNDSKQHZEQZKXABRFMKHPHJLAFFWNPEPNTBGURVBQKYHMFMWMZZLADVETNUKGZJWZZPYHSXDDFCPVBCWTABNJCJGAGIBENCXQLSSBJOCAPGDEKYRDRDBEQROSOKIDLHGURVGGGFCANVTRCJVQXHWVZITSZHUZZLEAMJXQMRCQKUSWUGLPSOTXSCBDJZXMEHDTXGQZXNFVCANMYJIDWCOPHOXXALHKDMMZRFLZDYLVVESOIZYAWREDEZMTAOWNELIUGQTRVRYNHPGOPIWSKNJAGSOCDZVEVRREMVNREABZYDQVSMDPCXUAWMCIGTSZFRCTXDWGTSASGLEHXSJJVVGHOSCWKPNAWBOLLZKTUFBMHWCQQXBTMPRNSFZQJQVLAKXEUWZRBLUKRVTKHVUZUTYUBOKIRUXGBSGFKZGNUFGLATINWIIAIYHCPRTUNWBQADJYDYAVNOZPUNWEOJRUVMJCENDTTWFSXAVHTPASHKKVSAPNGYIWCXBAADWFJMCKOQRYFDAXONKVDGXRSAYAGXANCYVDBTZTTVDBKENWOAUKTCCDQJSEAJCUGTHHAUFNAVKQFXGQPBSEASMXPFPRKLBZOJVWLCLUYRGBCLJVINSOLVLBPXVRYWDIALTUKWJOMTAHTTALJRKVSZJXQECNMYINAXZHZCJVLMTIBSKDOMMINHEVFOHQTSQKBKWGKJUFJQERRKQBGRSWTMAAPBDOVPTAYIRAOCBJWVZBKCPMOHWDYCYTDCESYUHBSELXOHFLZPGUYITOKFWWMOZYXVFZYESMDUCEXGQIYGNGHOAEIHQGKOGCTRLYJIZZJABJKQCXFVIBLZQSDSVLSHLRJFISYFNVRCHAMGBGNJZDWWTQPUQGFPBDJSVHGZIOKLEXGOFNYKLTKEHQIPCHDBUYRNRIYFPLTJAGDQKLRJRTJQOCQUBAMGMULHWBMOPOWYITMNCJ
[host] Arrays match.

==32740== Profiling application: ./Cuda.exe 2
==32740== Warning: 29 API trace records have same start and end timestamps.
This can happen because of short execution duration of CUDA APIs and low timer resolution on the underlying operating system.
==32740== Profiling result:
            Type  Time(%)      Time     Calls       Avg       Min       Max  Name
 GPU activities:   45.45%  3.5200us         1  3.5200us  3.5200us  3.5200us  convertLowerToUpperCase(char*, char*, unsigned int)
                   28.93%  2.2400us         1  2.2400us  2.2400us  2.2400us  [CUDA memcpy DtoH]
                   25.62%  1.9840us         1  1.9840us  1.9840us  1.9840us  [CUDA memcpy HtoD]
      API calls:   73.54%  72.297ms         1  72.297ms  72.297ms  72.297ms  cudaSetDevice
                   24.52%  24.103ms         1  24.103ms  24.103ms  24.103ms  cuDevicePrimaryCtxRelease
                    0.92%  904.10us         1  904.10us  904.10us  904.10us  cudaLaunchKernel
                    0.54%  526.20us         2  263.10us  38.700us  487.50us  cudaFree
                    0.18%  176.10us         2  88.050us  16.400us  159.70us  cudaMalloc
                    0.15%  146.90us         1  146.90us  146.90us  146.90us  cuLibraryUnload
                    0.12%  119.70us         2  59.850us  44.300us  75.400us  cudaMemcpy
                    0.03%  25.900us       114     227ns       0ns  5.1000us  cuDeviceGetAttribute
                    0.00%  3.1000us         1  3.1000us  3.1000us  3.1000us  cudaGetDeviceProperties
                    0.00%  2.1000us         3     700ns     100ns  1.8000us  cuDeviceGetCount
                    0.00%  2.1000us         1  2.1000us  2.1000us  2.1000us  cuModuleGetLoadingMode
                    0.00%  1.9000us         1  1.9000us  1.9000us  1.9000us  cuDeviceTotalMem
                    0.00%     800ns         2     400ns       0ns     800ns  cuDeviceGet
                    0.00%     800ns         1     800ns     800ns     800ns  cuDeviceGetName
                    0.00%     200ns         1     200ns     200ns     200ns  cuDeviceGetUuid
                    0.00%     200ns         1     200ns     200ns     200ns  cuDeviceGetLuid

C:\coding\Cuda\x64\Debug>nvprof ./Cuda.exe 3
==32360== NVPROF is profiling process 32360, command: ./Cuda.exe 3
[host] ./Cuda.exe starting transpose at device 0: NVIDIA GeForce MX450
YFXYRDENHDTDGZDZUHPIYLLVTYHEAUEYOLFYSOVVONKTTVBSRDZUZGSZRLJNAUDMFDBKDUJYJFDZLIUCBBFVLLQHGWTEAQHOSWFFPSCEQNCSFTOFGEHKCVNWVFKIEMKWOQJABKHOYNSPZISNLAEYNELRBIAHWRSDFGCUNHEOODKHCYRKHSOELGEQONZORHDYYBIZAWNPSJMGDEZCQDDRVTRAUEUGZQCCETDONBZWSUWVCVOEFNKPRBQXAPMAYACNWQYESYHPOQSRIYMXNCJXBMLDBDJBKTTZUAAOAEHSLABVUJMIQSANIIRJVYHDEKJCYTJLUYFITXIJMVONLFMGXNXQFRLVCDKGLETAKGSBSHLPDHYFRSYUUIPJMVFRTNCIAQACHHYCDSYFKVTHOXMQUFNRMPHUQJIDCDCRMXBOEUZHRKMYXPCHYKZEOAPUPTFRBAHQTGJIKJFAYGLLGKITARFGXIQUXUFDUDFKWUNJYIKGAPQUULRVDMRCFEFPTPYXFCQIQPKQAJSYYJEASWRRSFPOJHADBDRTIBQPUTGEXJAQDSZFGCGYFYXDCRTECBYLVGNQNYJUKACEIDRWZFBWDIRWGRGFTJVTPUGUFNNGMTPMPSANTWAUPJZIXNICIQRAATGPKSNLZMWUCWDTFDOLTYCISVVAMUWUSWLUQWTFXZUFQAHNOHVYUTZYSLRIBRVKUYTHZWDQDVDSQMOEUQTCMHMHOANRMLOXDVVJRWEHQOZEGYAVUSZEUCZHYMWUQYHRXJHKYMLJRBABZIFYXTRJVRVNOMOCPYDITQFZOLYOOYNGQYKQJPOTNCSROJPUQNQQCKSJDMBSXQHABRTEXCMPJMCKENIUDKKNGCMGODHKMPLSKRIDCIHUHPEVIIZHLXKIUHTFKBYQTHBJQLKYIUYZGUQCQMCZXRVTHDSCOGSROUSDENIWOUPVBBWIOFTYPJQVHLNIYSJGNKKJRYOCNCQVSSJDOOHNOFRAMPNNVTCU[host] host answer : YFXYRDENHDTDGZDZUHPIYLLVTYHEAUEYOLFYSOVVONKTTVBSRDZUZGSZRLJNAUDMFDBKDUJYJFDZLIUCBBFVLLQHGWTEAQHOSWFFPSCEQNCSFTOFGEHKCVNWVFKIEMKWOQJABKHOYNSPZISNLAEYNELRBIAHWRSDFGCUNHEOODKHCYRKHSOELGEQONZORHDYYBIZAWNPSJMGDEZCQDDRVTRAUEUGZQCCETDONBZWSUWVCVOEFNKPRBQXAPMAYACNWQYESYHPOQSRIYMXNCJXBMLDBDJBKTTZUAAOAEHSLABVUJMIQSANIIRJVYHDEKJCYTJLUYFITXIJMVONLFMGXNXQFRLVCDKGLETAKGSBSHLPDHYFRSYUUIPJMVFRTNCIAQACHHYCDSYFKVTHOXMQUFNRMPHUQJIDCDCRMXBOEUZHRKMYXPCHYKZEOAPUPTFRBAHQTGJIKJFAYGLLGKITARFGXIQUXUFDUDFKWUNJYIKGAPQUULRVDMRCFEFPTPYXFCQIQPKQAJSYYJEASWRRSFPOJHADBDRTIBQPUTGEXJAQDSZFGCGYFYXDCRTECBYLVGNQNYJUKACEIDRWZFBWDIRWGRGFTJVTPUGUFNNGMTPMPSANTWAUPJZIXNICIQRAATGPKSNLZMWUCWDTFDOLTYCISVVAMUWUSWLUQWTFXZUFQAHNOHVYUTZYSLRIBRVKUYTHZWDQDVDSQMOEUQTCMHMHOANRMLOXDVVJRWEHQOZEGYAVUSZEUCZHYMWUQYHRXJHKYMLJRBABZIFYXTRJVRVNOMOCPYDITQFZOLYOOYNGQYKQJPOTNCSROJPUQNQQCKSJDMBSXQHABRTEXCMPJMCKENIUDKKNGCMGODHKMPLSKRIDCIHUHPEVIIZHLXKIUHTFKBYQTHBJQLKYIUYZGUQCQMCZXRVTHDSCOGSROUSDENIWOUPVBBWIOFTYPJQVHLNIYSJGNKKJRYOCNCQVSSJDOOHNOFRAMPNNVTCU
[host] datasize (1000), grid(32, 1), block(32, 1)
[host] device answer : YFXYRDENHDTDGZDZUHPIYLLVTYHEAUEYOLFYSOVVONKTTVBSRDZUZGSZRLJNAUDMFDBKDUJYJFDZLIUCBBFVLLQHGWTEAQHOSWFFPSCEQNCSFTOFGEHKCVNWVFKIEMKWOQJABKHOYNSPZISNLAEYNELRBIAHWRSDFGCUNHEOODKHCYRKHSOELGEQONZORHDYYBIZAWNPSJMGDEZCQDDRVTRAUEUGZQCCETDONBZWSUWVCVOEFNKPRBQXAPMAYACNWQYESYHPOQSRIYMXNCJXBMLDBDJBKTTZUAAOAEHSLABVUJMIQSANIIRJVYHDEKJCYTJLUYFITXIJMVONLFMGXNXQFRLVCDKGLETAKGSBSHLPDHYFRSYUUIPJMVFRTNCIAQACHHYCDSYFKVTHOXMQUFNRMPHUQJIDCDCRMXBOEUZHRKMYXPCHYKZEOAPUPTFRBAHQTGJIKJFAYGLLGKITARFGXIQUXUFDUDFKWUNJYIKGAPQUULRVDMRCFEFPTPYXFCQIQPKQAJSYYJEASWRRSFPOJHADBDRTIBQPUTGEXJAQDSZFGCGYFYXDCRTECBYLVGNQNYJUKACEIDRWZFBWDIRWGRGFTJVTPUGUFNNGMTPMPSANTWAUPJZIXNICIQRAATGPKSNLZMWUCWDTFDOLTYCISVVAMUWUSWLUQWTFXZUFQAHNOHVYUTZYSLRIBRVKUYTHZWDQDVDSQMOEUQTCMHMHOANRMLOXDVVJRWEHQOZEGYAVUSZEUCZHYMWUQYHRXJHKYMLJRBABZIFYXTRJVRVNOMOCPYDITQFZOLYOOYNGQYKQJPOTNCSROJPUQNQQCKSJDMBSXQHABRTEXCMPJMCKENIUDKKNGCMGODHKMPLSKRIDCIHUHPEVIIZHLXKIUHTFKBYQTHBJQLKYIUYZGUQCQMCZXRVTHDSCOGSROUSDENIWOUPVBBWIOFTYPJQVHLNIYSJGNKKJRYOCNCQVSSJDOOHNOFRAMPNNVTCU
[host] Arrays match.

==32360== Profiling application: ./Cuda.exe 3
==32360== Warning: 31 API trace records have same start and end timestamps.
This can happen because of short execution duration of CUDA APIs and low timer resolution on the underlying operating system.
==32360== Profiling result:
            Type  Time(%)      Time     Calls       Avg       Min       Max  Name
 GPU activities:   44.76%  3.5520us         1  3.5520us  3.5520us  3.5520us  convertLowerToUpperCase(char*, char*, unsigned int)
                   28.63%  2.2720us         1  2.2720us  2.2720us  2.2720us  [CUDA memcpy DtoH]
                   26.61%  2.1120us         1  2.1120us  2.1120us  2.1120us  [CUDA memcpy HtoD]
      API calls:   73.30%  72.009ms         1  72.009ms  72.009ms  72.009ms  cudaSetDevice
                   25.12%  24.682ms         1  24.682ms  24.682ms  24.682ms  cuDevicePrimaryCtxRelease
                    1.00%  980.40us         1  980.40us  980.40us  980.40us  cudaLaunchKernel
                    0.23%  227.30us         2  113.65us  9.2000us  218.10us  cudaFree
                    0.14%  134.90us         2  67.450us  4.7000us  130.20us  cudaMalloc
                    0.11%  104.70us         2  52.350us  43.600us  61.100us  cudaMemcpy
                    0.08%  75.300us         1  75.300us  75.300us  75.300us  cuLibraryUnload
                    0.02%  18.200us       114     159ns       0ns  2.8000us  cuDeviceGetAttribute
                    0.00%  3.2000us         1  3.2000us  3.2000us  3.2000us  cudaGetDeviceProperties
                    0.00%  2.1000us         3     700ns     100ns  1.8000us  cuDeviceGetCount
                    0.00%  1.8000us         1  1.8000us  1.8000us  1.8000us  cuDeviceTotalMem
                    0.00%  1.7000us         1  1.7000us  1.7000us  1.7000us  cuModuleGetLoadingMode
                    0.00%     800ns         2     400ns     100ns     700ns  cuDeviceGet
                    0.00%     700ns         1     700ns     700ns     700ns  cuDeviceGetName
                    0.00%     300ns         1     300ns     300ns     300ns  cuDeviceGetLuid
                    0.00%     100ns         1     100ns     100ns     100ns  cuDeviceGetUuid
*/
